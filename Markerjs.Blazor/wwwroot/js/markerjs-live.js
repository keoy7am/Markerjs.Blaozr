!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).mjslive = {}) }(this, (function (t) { "use strict"; var e = function () { function t() { } return t.createDefs = function () { return document.createElementNS("http://www.w3.org/2000/svg", "defs") }, t.createStylesheet = function () { var t = document.createElementNS("http://www.w3.org/2000/svg", "style"); return t.setAttribute("type", "text/css"), t }, t.setAttributes = function (t, e) { for (var i = 0, s = e; i < s.length; i++) { var r = s[i], o = r[0], n = r[1]; t.setAttribute(o, n) } }, t.createRect = function (e, i, s) { var r = document.createElementNS("http://www.w3.org/2000/svg", "rect"); return r.setAttribute("width", e.toString()), r.setAttribute("height", i.toString()), s && t.setAttributes(r, s), r }, t.createLine = function (e, i, s, r, o) { var n = document.createElementNS("http://www.w3.org/2000/svg", "line"); return n.setAttribute("x1", e.toString()), n.setAttribute("y1", i.toString()), n.setAttribute("x2", s.toString()), n.setAttribute("y2", r.toString()), o && t.setAttributes(n, o), n }, t.createPolygon = function (e, i) { var s = document.createElementNS("http://www.w3.org/2000/svg", "polygon"); return s.setAttribute("points", e), i && t.setAttributes(s, i), s }, t.createCircle = function (e, i) { var s = document.createElementNS("http://www.w3.org/2000/svg", "circle"); return s.setAttribute("cx", (e / 2).toString()), s.setAttribute("cy", (e / 2).toString()), s.setAttribute("r", e.toString()), i && t.setAttributes(s, i), s }, t.createEllipse = function (e, i, s) { var r = document.createElementNS("http://www.w3.org/2000/svg", "ellipse"); return r.setAttribute("cx", (e / 2).toString()), r.setAttribute("cy", (i / 2).toString()), r.setAttribute("rx", (e / 2).toString()), r.setAttribute("ry", (i / 2).toString()), s && t.setAttributes(r, s), r }, t.createGroup = function (e) { var i = document.createElementNS("http://www.w3.org/2000/svg", "g"); return e && t.setAttributes(i, e), i }, t.createTransform = function () { return document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGTransform() }, t.createMarker = function (e, i, s, r, o, n, h) { var a = document.createElementNS("http://www.w3.org/2000/svg", "marker"); return t.setAttributes(a, [["id", e], ["orient", i], ["markerWidth", s.toString()], ["markerHeight", r.toString()], ["refX", o.toString()], ["refY", n.toString()]]), a.appendChild(h), a }, t.createText = function (e) { var i = document.createElementNS("http://www.w3.org/2000/svg", "text"); return i.setAttribute("x", "0"), i.setAttribute("y", "0"), e && t.setAttributes(i, e), i }, t.createTSpan = function (e, i) { var s = document.createElementNS("http://www.w3.org/2000/svg", "tspan"); return s.textContent = e, i && t.setAttributes(s, i), s }, t.createImage = function (e) { var i = document.createElementNS("http://www.w3.org/2000/svg", "image"); return e && t.setAttributes(i, e), i }, t.createPoint = function (t, e) { var i = document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGPoint(); return i.x = t, i.y = e, i }, t.createPath = function (e, i) { var s = document.createElementNS("http://www.w3.org/2000/svg", "path"); return s.setAttribute("d", e), i && t.setAttributes(s, i), s }, t }(), i = function () { function t() { } return t.addKey = function (e) { t.key = e }, Object.defineProperty(t, "isLicensed", { get: function () { return !!t.key && new RegExp(/^MJSL-[A-Z][0-9]{3}-[A-Z][0-9]{3}-[0-9]{4}$/, "i").test(t.key) }, enumerable: !1, configurable: !0 }), t }(), s = function (t, e) { return (s = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (t, e) { t.__proto__ = e } || function (t, e) { for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]) })(t, e) }; function r(t, e) { function i() { this.constructor = t } s(t, e), t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i) } var o = function () { function t(t) { this._outerContainer = t; var i = e.createGroup(); this._outerContainer.appendChild(i), this._container = i } return Object.defineProperty(t.prototype, "outerContainer", { get: function () { return this._outerContainer }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "container", { get: function () { return this._container }, enumerable: !1, configurable: !0 }), t.prototype.ownsTarget = function (t) { return !1 }, t.prototype.select = function () { }, t.prototype.deselect = function () { }, t.prototype.pointerDown = function (t, e) { }, t.prototype.dblClick = function (t, e) { }, t.prototype.pointerUp = function (t) { }, t.prototype.dispose = function () { }, t.prototype.addMarkerVisualToContainer = function (t) { this.container.childNodes.length > 0 ? this.container.insertBefore(t, this.container.childNodes[0]) : this.container.appendChild(t) }, t.prototype.restoreState = function (t) { this.notes = t.notes }, t.prototype.scale = function (t, e) { }, t.typeName = "MarkerBase", t }(), n = function () { function t() { } return t.toITransformMatrix = function (t) { return { a: t.a, b: t.b, c: t.c, d: t.d, e: t.e, f: t.f } }, t.toSVGMatrix = function (t, e) { return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t.e = e.e, t.f = e.f, t }, t }(), h = function (t) { function i(i) { var s = t.call(this, i) || this; return s.left = 0, s.top = 0, s.width = 0, s.height = 0, s.defaultSize = { x: 50, y: 20 }, s.offsetX = 0, s.offsetY = 0, s.rotationAngle = 0, s.container.transform.baseVal.appendItem(e.createTransform()), s } return r(i, t), Object.defineProperty(i.prototype, "centerX", { get: function () { return this.left + this.width / 2 }, enumerable: !1, configurable: !0 }), Object.defineProperty(i.prototype, "centerY", { get: function () { return this.top + this.height / 2 }, enumerable: !1, configurable: !0 }), Object.defineProperty(i.prototype, "visual", { get: function () { return this._visual }, set: function (t) { this._visual = t; var i = e.createTransform(); this._visual.transform.baseVal.appendItem(i) }, enumerable: !1, configurable: !0 }), i.prototype.ownsTarget = function (e) { return !!t.prototype.ownsTarget.call(this, e) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i), this.select() }, i.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e) }, i.prototype.moveVisual = function (t) { this.visual.style.transform = "translate(" + t.x + "px, " + t.y + "px)" }, i.prototype.resize = function (t) { this.setSize() }, i.prototype.setSize = function () { this.moveVisual({ x: this.left, y: this.top }) }, i.prototype.rotate = function (t) { if (Math.abs(t.x - this.centerX) > .1) { var e = Math.sign(t.x - this.centerX); this.rotationAngle = 180 * Math.atan((t.y - this.centerY) / (t.x - this.centerX)) / Math.PI + 90 * e, this.applyRotation() } }, i.prototype.applyRotation = function () { var t = this.container.transform.baseVal.getItem(0); t.setRotate(this.rotationAngle, this.centerX, this.centerY), this.container.transform.baseVal.replaceItem(t, 0) }, i.prototype.rotatePoint = function (t) { if (0 === this.rotationAngle) return t; var i = this.container.getCTM(), s = e.createPoint(t.x, t.y); return { x: (s = s.matrixTransform(i)).x, y: s.y } }, i.prototype.unrotatePoint = function (t) { if (0 === this.rotationAngle) return t; var i = this.container.getCTM(); i = i.inverse(); var s = e.createPoint(t.x, t.y); return { x: (s = s.matrixTransform(i)).x, y: s.y } }, i.prototype.select = function () { t.prototype.select.call(this) }, i.prototype.deselect = function () { t.prototype.deselect.call(this) }, i.prototype.restoreState = function (e) { t.prototype.restoreState.call(this, e); var i = e; this.left = i.left, this.top = i.top, this.width = i.width, this.height = i.height, this.rotationAngle = i.rotationAngle, this.visual.transform.baseVal.getItem(0).setMatrix(n.toSVGMatrix(this.visual.transform.baseVal.getItem(0).matrix, i.visualTransformMatrix)), this.container.transform.baseVal.getItem(0).setMatrix(n.toSVGMatrix(this.container.transform.baseVal.getItem(0).matrix, i.containerTransformMatrix)) }, i.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i); var s = this.rotatePoint({ x: this.left, y: this.top }), r = this.unrotatePoint({ x: s.x * e, y: s.y * i }); this.left = r.x, this.top = r.y, this.width = this.width * e, this.height = this.height * i }, i }(o), a = function (t) { function i(e) { var i = t.call(this, e) || this; return i.fillColor = "transparent", i.strokeColor = "transparent", i.strokeWidth = 0, i.strokeDasharray = "", i.opacity = 1, i.setStrokeColor = i.setStrokeColor.bind(i), i.setFillColor = i.setFillColor.bind(i), i.setStrokeWidth = i.setStrokeWidth.bind(i), i.setStrokeDasharray = i.setStrokeDasharray.bind(i), i.createVisual = i.createVisual.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.visual) }, i.prototype.createVisual = function () { this.visual = e.createRect(1, 1, [["fill", this.fillColor], ["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()], ["stroke-dasharray", this.strokeDasharray], ["opacity", this.opacity.toString()]]), this.addMarkerVisualToContainer(this.visual) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.resize = function (e) { t.prototype.resize.call(this, e), this.setSize() }, i.prototype.setSize = function () { t.prototype.setSize.call(this), e.setAttributes(this.visual, [["width", this.width.toString()], ["height", this.height.toString()]]) }, i.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e), this.setSize() }, i.prototype.setStrokeColor = function (t) { this.strokeColor = t, this.visual && e.setAttributes(this.visual, [["stroke", this.strokeColor]]) }, i.prototype.setFillColor = function (t) { this.fillColor = t, this.visual && e.setAttributes(this.visual, [["fill", this.fillColor]]) }, i.prototype.setStrokeWidth = function (t) { this.strokeWidth = t, this.visual && e.setAttributes(this.visual, [["stroke-width", this.strokeWidth.toString()]]) }, i.prototype.setStrokeDasharray = function (t) { this.strokeDasharray = t, this.visual && e.setAttributes(this.visual, [["stroke-dasharray", this.strokeDasharray]]) }, i.prototype.restoreState = function (e) { var i = e; this.fillColor = i.fillColor, this.strokeColor = i.strokeColor, this.strokeWidth = i.strokeWidth, this.strokeDasharray = i.strokeDasharray, this.opacity = i.opacity, this.createVisual(), t.prototype.restoreState.call(this, e), this.setSize() }, i.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i), this.setSize() }, i.title = "Rectangle marker", i }(h), l = function (t) { function e(e) { return t.call(this, e) || this } return r(e, t), e.typeName = "FrameMarker", e.title = "Frame marker", e }(a), p = function (t) { function e(e) { var i = t.call(this, e) || this; return i.x1 = 0, i.y1 = 0, i.x2 = 0, i.y2 = 0, i.defaultLength = 50, i } return r(e, t), e.prototype.ownsTarget = function (e) { return !!t.prototype.ownsTarget.call(this, e) }, e.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, e.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e) }, e.prototype.adjustVisual = function () { }, e.prototype.resize = function (t) { this.adjustVisual() }, e.prototype.select = function () { t.prototype.select.call(this) }, e.prototype.deselect = function () { t.prototype.deselect.call(this) }, e.prototype.restoreState = function (e) { t.prototype.restoreState.call(this, e); var i = e; this.x1 = i.x1, this.y1 = i.y1, this.x2 = i.x2, this.y2 = i.y2 }, e.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i), this.x1 = this.x1 * e, this.y1 = this.y1 * i, this.x2 = this.x2 * e, this.y2 = this.y2 * i, this.adjustVisual() }, e }(o), c = function (t) { function i(e) { var i = t.call(this, e) || this; return i.strokeColor = "transparent", i.strokeWidth = 0, i.strokeDasharray = "", i.setStrokeColor = i.setStrokeColor.bind(i), i.setStrokeWidth = i.setStrokeWidth.bind(i), i.setStrokeDasharray = i.setStrokeDasharray.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.visual && e !== this.selectorLine && e !== this.visibleLine) }, i.prototype.createVisual = function () { this.visual = e.createGroup(), this.selectorLine = e.createLine(this.x1, this.y1, this.x2, this.y2, [["stroke", "transparent"], ["stroke-width", (this.strokeWidth + 10).toString()]]), this.visibleLine = e.createLine(this.x1, this.y1, this.x2, this.y2, [["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()]]), this.visual.appendChild(this.selectorLine), this.visual.appendChild(this.visibleLine), this.addMarkerVisualToContainer(this.visual) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.adjustVisual = function () { this.selectorLine.setAttribute("x1", this.x1.toString()), this.selectorLine.setAttribute("y1", this.y1.toString()), this.selectorLine.setAttribute("x2", this.x2.toString()), this.selectorLine.setAttribute("y2", this.y2.toString()), this.visibleLine.setAttribute("x1", this.x1.toString()), this.visibleLine.setAttribute("y1", this.y1.toString()), this.visibleLine.setAttribute("x2", this.x2.toString()), this.visibleLine.setAttribute("y2", this.y2.toString()), e.setAttributes(this.visibleLine, [["stroke", this.strokeColor]]), e.setAttributes(this.visibleLine, [["stroke-width", this.strokeWidth.toString()]]), e.setAttributes(this.visibleLine, [["stroke-dasharray", this.strokeDasharray.toString()]]) }, i.prototype.setStrokeColor = function (t) { this.strokeColor = t, this.adjustVisual() }, i.prototype.setStrokeWidth = function (t) { this.strokeWidth = t, this.adjustVisual() }, i.prototype.setStrokeDasharray = function (t) { this.strokeDasharray = t, this.adjustVisual() }, i.prototype.restoreState = function (e) { t.prototype.restoreState.call(this, e); var i = e; this.strokeColor = i.strokeColor, this.strokeWidth = i.strokeWidth, this.strokeDasharray = i.strokeDasharray, this.createVisual(), this.adjustVisual() }, i.typeName = "LineMarker", i.title = "Line marker", i }(p), u = function (t) { function i(e) { var i = t.call(this, e) || this; return i.color = "transparent", i.padding = 5, i.text = "", i.defaultSize = { x: 100, y: 30 }, i.setColor = i.setColor.bind(i), i.setFont = i.setFont.bind(i), i.renderText = i.renderText.bind(i), i.sizeText = i.sizeText.bind(i), i.setSize = i.setSize.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { if (t.prototype.ownsTarget.call(this, e) || e === this.visual || e === this.textElement || e === this.bgRectangle) return !0; var i = !1; return this.textElement.childNodes.forEach((function (t) { t === e && (i = !0) })), i }, i.prototype.createVisual = function () { this.visual = e.createGroup(), this.bgRectangle = e.createRect(1, 1, [["fill", "transparent"]]), this.visual.appendChild(this.bgRectangle), this.textElement = e.createText([["fill", this.color], ["font-family", this.fontFamily], ["font-size", "16px"], ["x", "0"], ["y", "0"]]), this.textElement.transform.baseVal.appendItem(e.createTransform()), this.textElement.transform.baseVal.appendItem(e.createTransform()), this.visual.appendChild(this.textElement), this.addMarkerVisualToContainer(this.visual), this.renderText() }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i), this.pointerDownPoint = e }, i.prototype.renderText = function () { for (var t = this; this.textElement.lastChild;)this.textElement.removeChild(this.textElement.lastChild); this.text.split(/\r\n|[\n\v\f\r\x85\u2028\u2029]/).forEach((function (i) { t.textElement.appendChild(e.createTSpan("" === i.trim() ? " " : i.trim(), [["x", "0"], ["dy", "1.2em"]])) })), setTimeout(this.sizeText, 10) }, i.prototype.getTextScale = function () { var t = this.textElement.getBBox(), e = 1; if (t.width > 0 && t.height > 0) { var i = (1 * this.width - this.width * this.padding * 2 / 100) / t.width, s = (1 * this.height - this.height * this.padding * 2 / 100) / t.height; e = Math.min(i, s) } return e }, i.prototype.getTextPosition = function (t) { var e = this.textElement.getBBox(), i = 0, s = 0; return e.width > 0 && e.height > 0 && (i = (this.width - e.width * t) / 2, s = this.height / 2 - e.height * t / 2), { x: i, y: s } }, i.prototype.sizeText = function () { var t = this.textElement.getBBox(), e = this.getTextScale(), i = this.getTextPosition(e); i.y -= t.y * e, navigator.userAgent.indexOf("Edge/") > -1 ? this.textElement.style.transform = "translate(" + i.x + "px, " + i.y + "px) scale(" + e + ", " + e + ")" : (this.textElement.transform.baseVal.getItem(0).setTranslate(i.x, i.y), this.textElement.transform.baseVal.getItem(1).setScale(e, e)) }, i.prototype.resize = function (e) { t.prototype.resize.call(this, e), this.setSize(), this.sizeText() }, i.prototype.setSize = function () { t.prototype.setSize.call(this), e.setAttributes(this.visual, [["width", this.width.toString()], ["height", this.height.toString()]]), e.setAttributes(this.bgRectangle, [["width", this.width.toString()], ["height", this.height.toString()]]) }, i.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e), this.setSize() }, i.prototype.deselect = function () { t.prototype.deselect.call(this) }, i.prototype.dblClick = function (e, i) { t.prototype.dblClick.call(this, e, i) }, i.prototype.setColor = function (t) { e.setAttributes(this.textElement, [["fill", t]]), this.color = t }, i.prototype.setFont = function (t) { e.setAttributes(this.textElement, [["font-family", t]]), this.fontFamily = t, this.renderText() }, i.prototype.restoreState = function (e) { var i = e; this.color = i.color, this.fontFamily = i.fontFamily, this.padding = i.padding, this.text = i.text, this.createVisual(), t.prototype.restoreState.call(this, e), this.setSize() }, i.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i), this.setSize(), this.sizeText() }, i.typeName = "TextMarker", i.title = "Text marker", i }(h), d = function (t) { function i(e) { var i = t.call(this, e) || this; return i.color = "transparent", i.lineWidth = 3, i } return r(i, t), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.visual && e !== this.drawingImage) }, i.prototype.createVisual = function () { this.visual = e.createGroup(), this.drawingImage = e.createImage(), this.visual.appendChild(this.drawingImage); var t = e.createTransform(); this.visual.transform.baseVal.appendItem(t), this.addMarkerVisualToContainer(this.visual) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.resize = function (i) { t.prototype.resize.call(this, i), e.setAttributes(this.visual, [["width", this.width.toString()], ["height", this.height.toString()]]), e.setAttributes(this.drawingImage, [["width", this.width.toString()], ["height", this.height.toString()]]) }, i.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e) }, i.prototype.select = function () { t.prototype.select.call(this) }, i.prototype.deselect = function () { t.prototype.deselect.call(this) }, i.prototype.setDrawingImage = function () { e.setAttributes(this.drawingImage, [["width", this.width.toString()], ["height", this.height.toString()]]), e.setAttributes(this.drawingImage, [["href", this.drawingImgUrl]]), this.moveVisual({ x: this.left, y: this.top }) }, i.prototype.restoreState = function (e) { this.createVisual(), t.prototype.restoreState.call(this, e), this.drawingImgUrl = e.drawingImgUrl, this.setDrawingImage() }, i.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i), this.setDrawingImage() }, i.typeName = "FreehandMarker", i.title = "Freehand marker", i }(h), y = function (t) { function i(e) { var i = t.call(this, e) || this; return i.arrowType = "end", i.arrowBaseHeight = 10, i.arrowBaseWidth = 10, i.getArrowPoints = i.getArrowPoints.bind(i), i.setArrowType = i.setArrowType.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.arrow1 && e !== this.arrow2) }, i.prototype.getArrowPoints = function (t, e) { var i = this.arrowBaseWidth + 2 * this.strokeWidth, s = this.arrowBaseHeight + 2 * this.strokeWidth; return t - i / 2 + "," + (e + s / 2) + " " + t + "," + (e - s / 2) + " " + (t + i / 2) + "," + (e + s / 2) }, i.prototype.createTips = function () { this.arrow1 = e.createPolygon(this.getArrowPoints(this.x1, this.y1), [["fill", this.strokeColor]]), this.arrow1.transform.baseVal.appendItem(e.createTransform()), this.visual.appendChild(this.arrow1), this.arrow2 = e.createPolygon(this.getArrowPoints(this.x2, this.y2), [["fill", this.strokeColor]]), this.arrow2.transform.baseVal.appendItem(e.createTransform()), this.visual.appendChild(this.arrow2) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.adjustVisual = function () { if (t.prototype.adjustVisual.call(this), this.arrow1 && this.arrow2 && (this.arrow1.style.display = "both" === this.arrowType || "start" === this.arrowType ? "" : "none", this.arrow2.style.display = "both" === this.arrowType || "end" === this.arrowType ? "" : "none", e.setAttributes(this.arrow1, [["points", this.getArrowPoints(this.x1, this.y1)], ["fill", this.strokeColor]]), e.setAttributes(this.arrow2, [["points", this.getArrowPoints(this.x2, this.y2)], ["fill", this.strokeColor]]), Math.abs(this.x1 - this.x2) > .1)) { var i = 180 * Math.atan((this.y2 - this.y1) / (this.x2 - this.x1)) / Math.PI + 90 * Math.sign(this.x1 - this.x2), s = this.arrow1.transform.baseVal.getItem(0); s.setRotate(i, this.x1, this.y1), this.arrow1.transform.baseVal.replaceItem(s, 0); var r = this.arrow2.transform.baseVal.getItem(0); r.setRotate(i + 180, this.x2, this.y2), this.arrow2.transform.baseVal.replaceItem(r, 0) } }, i.prototype.setArrowType = function (t) { this.arrowType = t, this.adjustVisual() }, i.prototype.restoreState = function (e) { t.prototype.restoreState.call(this, e); var i = e; this.arrowType = i.arrowType, this.createTips(), this.adjustVisual() }, i.typeName = "ArrowMarker", i.title = "Arrow marker", i }(c), g = function (t) { function e(e) { var i = t.call(this, e) || this; return i.strokeWidth = 0, i } return r(e, t), e.typeName = "CoverMarker", e.title = "Cover marker", e }(a), f = function (t) { function i(e) { var i = t.call(this, e) || this; return i.setOpacity = i.setOpacity.bind(i), i.strokeWidth = 0, i } return r(i, t), i.prototype.setOpacity = function (t) { this.opacity = t, this.visual && e.setAttributes(this.visual, [["opacity", this.opacity.toString()]]) }, i.typeName = "HighlightMarker", i.title = "Highlight marker", i }(g), v = function (t) { function i(e) { var i = t.call(this, e) || this; return i.bgColor = "transparent", i.tipPosition = { x: 0, y: 0 }, i.tipBase1Position = { x: 0, y: 0 }, i.tipBase2Position = { x: 0, y: 0 }, i.defaultSize = { x: 100, y: 30 }, i.setBgColor = i.setBgColor.bind(i), i.getTipPoints = i.getTipPoints.bind(i), i.positionTip = i.positionTip.bind(i), i.setTipPoints = i.setTipPoints.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { return t.prototype.ownsTarget.call(this, e) || this.tip === e }, i.prototype.createTip = function () { e.setAttributes(this.bgRectangle, [["fill", this.bgColor], ["rx", "10px"]]), this.tip = e.createPolygon(this.getTipPoints(), [["fill", this.bgColor]]), this.visual.appendChild(this.tip) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e) }, i.prototype.setBgColor = function (t) { e.setAttributes(this.bgRectangle, [["fill", t]]), e.setAttributes(this.tip, [["fill", t]]), this.bgColor = t }, i.prototype.getTipPoints = function () { return this.setTipPoints(), this.tipBase1Position.x + "," + this.tipBase1Position.y + " " + this.tipBase2Position.x + "," + this.tipBase2Position.y + " " + this.tipPosition.x + "," + this.tipPosition.y }, i.prototype.setTipPoints = function (t) { void 0 === t && (t = !1); var e = Math.min(this.height / 2, 15), i = this.height / 5; t && (this.tipPosition = { x: e + i / 2, y: this.height + 20 }); var s = Math.atan(this.height / 2 / (this.width / 2)); if (this.tipPosition.x < this.width / 2 && this.tipPosition.y < this.height / 2) s < Math.atan((this.height / 2 - this.tipPosition.y) / (this.width / 2 - this.tipPosition.x)) ? (i = this.width / 5, e = Math.min(this.width / 2, 15), this.tipBase1Position = { x: e, y: 0 }, this.tipBase2Position = { x: e + i, y: 0 }) : (this.tipBase1Position = { x: 0, y: e }, this.tipBase2Position = { x: 0, y: e + i }); else if (this.tipPosition.x >= this.width / 2 && this.tipPosition.y < this.height / 2) { s < Math.atan((this.height / 2 - this.tipPosition.y) / (this.tipPosition.x - this.width / 2)) ? (i = this.width / 5, e = Math.min(this.width / 2, 15), this.tipBase1Position = { x: this.width - e - i, y: 0 }, this.tipBase2Position = { x: this.width - e, y: 0 }) : (this.tipBase1Position = { x: this.width, y: e }, this.tipBase2Position = { x: this.width, y: e + i }) } else if (this.tipPosition.x >= this.width / 2 && this.tipPosition.y >= this.height / 2) { s < Math.atan((this.tipPosition.y - this.height / 2) / (this.tipPosition.x - this.width / 2)) ? (i = this.width / 5, e = Math.min(this.width / 2, 15), this.tipBase1Position = { x: this.width - e - i, y: this.height }, this.tipBase2Position = { x: this.width - e, y: this.height }) : (this.tipBase1Position = { x: this.width, y: this.height - e - i }, this.tipBase2Position = { x: this.width, y: this.height - e }) } else { s < Math.atan((this.tipPosition.y - this.height / 2) / (this.width / 2 - this.tipPosition.x)) ? (i = this.width / 5, e = Math.min(this.width / 2, 15), this.tipBase1Position = { x: e, y: this.height }, this.tipBase2Position = { x: e + i, y: this.height }) : (this.tipBase1Position = { x: 0, y: this.height - e }, this.tipBase2Position = { x: 0, y: this.height - e - i }) } }, i.prototype.resize = function (e) { t.prototype.resize.call(this, e), this.positionTip() }, i.prototype.positionTip = function () { e.setAttributes(this.tip, [["points", this.getTipPoints()]]) }, i.prototype.select = function () { this.positionTip(), t.prototype.select.call(this) }, i.prototype.restoreState = function (e) { var i = e; this.bgColor = i.bgColor, this.tipPosition = i.tipPosition, t.prototype.restoreState.call(this, e), this.createTip(), this.setTipPoints() }, i.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i), this.tipPosition = { x: this.tipPosition.x * e, y: this.tipPosition.y * i }, this.positionTip() }, i.typeName = "CalloutMarker", i.title = "Callout marker", i }(u), m = function (t) { function i(e) { var i = t.call(this, e) || this; return i.fillColor = "transparent", i.strokeColor = "transparent", i.strokeWidth = 0, i.strokeDasharray = "", i.opacity = 1, i.setStrokeColor = i.setStrokeColor.bind(i), i.setFillColor = i.setFillColor.bind(i), i.setStrokeWidth = i.setStrokeWidth.bind(i), i.setStrokeDasharray = i.setStrokeDasharray.bind(i), i.setOpacity = i.setOpacity.bind(i), i.createVisual = i.createVisual.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.visual) }, i.prototype.createVisual = function () { this.visual = e.createEllipse(this.width / 2, this.height / 2, [["fill", this.fillColor], ["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()], ["stroke-dasharray", this.strokeDasharray], ["opacity", this.opacity.toString()]]), this.addMarkerVisualToContainer(this.visual) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.resize = function (e) { t.prototype.resize.call(this, e), this.setSize() }, i.prototype.setSize = function () { t.prototype.setSize.call(this), e.setAttributes(this.visual, [["cx", (this.width / 2).toString()], ["cy", (this.height / 2).toString()], ["rx", (this.width / 2).toString()], ["ry", (this.height / 2).toString()]]) }, i.prototype.pointerUp = function (e) { t.prototype.pointerUp.call(this, e), this.setSize() }, i.prototype.setStrokeColor = function (t) { this.strokeColor = t, this.visual && e.setAttributes(this.visual, [["stroke", this.strokeColor]]) }, i.prototype.setFillColor = function (t) { this.fillColor = t, this.visual && e.setAttributes(this.visual, [["fill", this.fillColor]]) }, i.prototype.setStrokeWidth = function (t) { this.strokeWidth = t, this.visual && e.setAttributes(this.visual, [["stroke-width", this.strokeWidth.toString()]]) }, i.prototype.setStrokeDasharray = function (t) { this.strokeDasharray = t, this.visual && e.setAttributes(this.visual, [["stroke-dasharray", this.strokeDasharray]]) }, i.prototype.setOpacity = function (t) { this.opacity = t, this.visual && e.setAttributes(this.visual, [["opacity", this.opacity.toString()]]) }, i.prototype.restoreState = function (e) { var i = e; this.fillColor = i.fillColor, this.strokeColor = i.strokeColor, this.strokeWidth = i.strokeWidth, this.strokeDasharray = i.strokeDasharray, this.opacity = i.opacity, this.createVisual(), t.prototype.restoreState.call(this, e), this.setSize() }, i.prototype.scale = function (e, i) { t.prototype.scale.call(this, e, i), this.setSize() }, i.typeName = "EllipseMarker", i.title = "Ellipse marker", i }(h), k = function (t) { function i(e) { return t.call(this, e) || this } return r(i, t), Object.defineProperty(i.prototype, "tipLength", { get: function () { return 10 + 3 * this.strokeWidth }, enumerable: !1, configurable: !0 }), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.tip1 && e !== this.tip2) }, i.prototype.createTips = function () { this.tip1 = e.createLine(this.x1 - this.tipLength / 2, this.y1, this.x1 + this.tipLength / 2, this.y1, [["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()]]), this.tip1.transform.baseVal.appendItem(e.createTransform()), this.visual.appendChild(this.tip1), this.tip2 = e.createLine(this.x2 - this.tipLength / 2, this.y2, this.x2 + this.tipLength / 2, this.y2, [["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()]]), this.tip2.transform.baseVal.appendItem(e.createTransform()), this.visual.appendChild(this.tip2) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.adjustVisual = function () { if (t.prototype.adjustVisual.call(this), this.tip1 && this.tip2 && (e.setAttributes(this.tip1, [["x1", (this.x1 - this.tipLength / 2).toString()], ["y1", this.y1.toString()], ["x2", (this.x1 + this.tipLength / 2).toString()], ["y2", this.y1.toString()], ["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()]]), e.setAttributes(this.tip2, [["x1", (this.x2 - this.tipLength / 2).toString()], ["y1", this.y2.toString()], ["x2", (this.x2 + this.tipLength / 2).toString()], ["y2", this.y2.toString()], ["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()]]), Math.abs(this.x1 - this.x2) > .1)) { var i = 180 * Math.atan((this.y2 - this.y1) / (this.x2 - this.x1)) / Math.PI + 90 * Math.sign(this.x1 - this.x2), s = this.tip1.transform.baseVal.getItem(0); s.setRotate(i, this.x1, this.y1), this.tip1.transform.baseVal.replaceItem(s, 0); var r = this.tip2.transform.baseVal.getItem(0); r.setRotate(i + 180, this.x2, this.y2), this.tip2.transform.baseVal.replaceItem(r, 0) } }, i.prototype.restoreState = function (e) { t.prototype.restoreState.call(this, e), this.createTips(), this.adjustVisual() }, i.typeName = "MeasurementMarker", i.title = "Measurement marker", i }(c), w = function (t) { function e(e) { var i = t.call(this, e) || this; return i.fillColor = "transparent", i } return r(e, t), e.typeName = "EllipseFrameMarker", e.title = "Ellipse frame marker", e }(m), b = function (t) { function i(e) { var i = t.call(this, e) || this; return i.strokeColor = "transparent", i.strokeWidth = 0, i.strokeDasharray = "", i.curveX = 0, i.curveY = 0, i.setStrokeColor = i.setStrokeColor.bind(i), i.setStrokeWidth = i.setStrokeWidth.bind(i), i.setStrokeDasharray = i.setStrokeDasharray.bind(i), i.adjustVisual = i.adjustVisual.bind(i), i.resize = i.resize.bind(i), i } return r(i, t), i.prototype.ownsTarget = function (e) { return !(!t.prototype.ownsTarget.call(this, e) && e !== this.visual && e !== this.selectorCurve && e !== this.visibleCurve) }, i.prototype.getPathD = function () { return "M " + this.x1 + " " + this.y1 + " Q " + this.curveX + " " + this.curveY + ", " + this.x2 + " " + this.y2 }, i.prototype.createVisual = function () { this.visual = e.createGroup(), this.selectorCurve = e.createPath(this.getPathD(), [["stroke", "transparent"], ["stroke-width", (this.strokeWidth + 10).toString()], ["fill", "transparent"]]), this.visibleCurve = e.createPath(this.getPathD(), [["stroke", this.strokeColor], ["stroke-width", this.strokeWidth.toString()], ["fill", "transparent"]]), this.visual.appendChild(this.selectorCurve), this.visual.appendChild(this.visibleCurve), this.addMarkerVisualToContainer(this.visual) }, i.prototype.pointerDown = function (e, i) { t.prototype.pointerDown.call(this, e, i) }, i.prototype.adjustVisual = function () { this.selectorCurve.setAttribute("d", this.getPathD()), this.visibleCurve.setAttribute("d", this.getPathD()), e.setAttributes(this.visibleCurve, [["stroke", this.strokeColor]]), e.setAttributes(this.visibleCurve, [["stroke-width", this.strokeWidth.toString()]]), e.setAttributes(this.visibleCurve, [["stroke-dasharray", this.strokeDasharray.toString()]]) }, i.prototype.setStrokeColor = function (t) { this.strokeColor = t, this.adjustVisual() }, i.prototype.setStrokeWidth = function (t) { this.strokeWidth = t, this.adjustVisual() }, i.prototype.setStrokeDasharray = function (t) { this.strokeDasharray = t, this.adjustVisual() }, i.prototype.scale = function (e, i) { this.curveX = this.curveX * e, this.curveY = this.curveY * i, t.prototype.scale.call(this, e, i) }, i.prototype.restoreState = function (e) { t.prototype.restoreState.call(this, e); var i = e; this.strokeColor = i.strokeColor, this.strokeWidth = i.strokeWidth, this.strokeDasharray = i.strokeDasharray, this.curveX = i.curveX, this.curveY = i.curveY, this.createVisual(), this.adjustVisual() }, i.typeName = "CurveMarker", i.title = "Curve marker", i }(p), x = function () { function t(t) { this._classNamePrefixBase = "__markerjslive_", this.classes = [], this.rules = [], this._classNamePrefix = this._classNamePrefixBase + "_" + t + "_" } return Object.defineProperty(t.prototype, "classNamePrefixBase", { get: function () { return this._classNamePrefixBase }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "classNamePrefix", { get: function () { return this._classNamePrefix }, enumerable: !1, configurable: !0 }), t.prototype.addClass = function (t) { return void 0 === this.styleSheet && this.addStyleSheet(), t.name = "" + this.classNamePrefix + t.localName, this.classes.push(t), this.styleSheet.sheet.insertRule("." + t.name + " {" + t.style + "}", this.styleSheet.sheet.cssRules.length), t }, t.prototype.addRule = function (t) { void 0 === this.styleSheet && this.addStyleSheet(), this.rules.push(t), this.styleSheet.sheet.insertRule(t.selector + " {" + t.style + "}", this.styleSheet.sheet.cssRules.length) }, t.prototype.addStyleSheet = function () { var t; this.styleSheet = document.createElement("style"), (null !== (t = this.styleSheetRoot) && void 0 !== t ? t : document.head).appendChild(this.styleSheet) }, t.prototype.removeStyleSheet = function () { var t; this.styleSheet && ((null !== (t = this.styleSheetRoot) && void 0 !== t ? t : document.head).removeChild(this.styleSheet), this.styleSheet = void 0) }, t }(), S = function (t, e) { this.selector = t, this.style = e }, C = function (t, e) { this.localName = t, this.style = e }, P = function () { function t() { this.create = [], this.close = [], this.load = [], this.select = [], this.over = [], this.pointerdown = [], this.pointermove = [], this.pointerup = [], this.pointerenter = [], this.pointerleave = [] } return t.prototype.addEventListener = function (t, e) { this[t].push(e) }, t.prototype.removeEventListener = function (t, e) { var i = this[t].indexOf(e); i > -1 && this[t].splice(i, 1) }, t }(), T = function () { function t(e) { this.touchPoints = 0, this.availableMarkerTypes = [l, d, y, u, w, m, f, v, k, g, c, b], this.markers = [], this.isDragging = !1, this._isOpen = !1, this.plugins = [], this.MARKER_CONTAINER_CLASS_SUFFIX = "marker-container", this.isPointerIn = !1, this.eventListeners = new P, this._instanceNo = t.instanceCounter++, this.styles = new x(this.instanceNo), this.target = e, this.targetRoot = document.body, this.open = this.open.bind(this), this.setTopLeft = this.setTopLeft.bind(this), this.addNewMarker = this.addNewMarker.bind(this), this.setCurrentMarker = this.setCurrentMarker.bind(this), this.onPointerDown = this.onPointerDown.bind(this), this.onDblClick = this.onDblClick.bind(this), this.onPointerMove = this.onPointerMove.bind(this), this.onPointerUp = this.onPointerUp.bind(this), this.onKeyUp = this.onKeyUp.bind(this), this.close = this.close.bind(this), this.closeUI = this.closeUI.bind(this), this.clientToLocalCoordinates = this.clientToLocalCoordinates.bind(this), this.onWindowResize = this.onWindowResize.bind(this), this.removeMarker = this.removeMarker.bind(this) } return Object.defineProperty(t.prototype, "instanceNo", { get: function () { return this._instanceNo }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "isOpen", { get: function () { return this._isOpen }, enumerable: !1, configurable: !0 }), t.prototype.open = function () { this.setupResizeObserver(), this.setEditingTarget(), this.setTopLeft(), this.initMarkerCanvas(), this.initOverlay(), this.attachEvents(), i.isLicensed || this.addLogo(), this._isOpen = !0 }, t.prototype.show = function (t) { var e = this; this.showUI(), this.open(), this.plugins.forEach((function (t) { return t.init(e) })), this.eventListeners.create.forEach((function (t) { return t(e) })), this.restoreState(t), this.eventListeners.load.forEach((function (t) { return t(e) })) }, t.prototype.close = function () { var t = this; this.isOpen && (this.coverDiv && this.closeUI(), this.targetObserver && this.targetObserver.unobserve(this.target), this._isOpen = !1, this.eventListeners.close.forEach((function (e) { return e(t) }))) }, t.prototype.setupResizeObserver = function () { var t = this; window.ResizeObserver && (this.targetObserver = new ResizeObserver((function () { t.resize(t.target.clientWidth, t.target.clientHeight) })), this.targetObserver.observe(this.target)) }, t.prototype.resize = function (t, e) { var i = t / this.imageWidth, s = e / this.imageHeight; this.imageWidth = Math.round(t), this.imageHeight = Math.round(e), this.editingTarget.width = this.imageWidth, this.editingTarget.height = this.imageHeight, this.editingTarget.style.width = this.imageWidth + "px", this.editingTarget.style.height = this.imageHeight + "px", this.markerImage.setAttribute("width", this.imageWidth.toString()), this.markerImage.setAttribute("height", this.imageHeight.toString()), this.markerImage.setAttribute("viewBox", "0 0 " + this.imageWidth.toString() + " " + this.imageHeight.toString()), this.markerImageHolder.style.width = this.imageWidth + "px", this.markerImageHolder.style.height = this.imageHeight + "px", this.overlayContainer.style.width = this.imageWidth + "px", this.overlayContainer.style.height = this.imageHeight + "px", this.coverDiv.style.width = this.imageWidth.toString() + "px", this.positionLogo(), this.scaleMarkers(i, s) }, t.prototype.scaleMarkers = function (t, e) { var i; this.currentMarker && this.currentMarker instanceof u || (i = this.currentMarker, this.setCurrentMarker()), this.markers.forEach((function (i) { return i.scale(t, e) })), void 0 !== i && this.setCurrentMarker(i) }, t.prototype.setEditingTarget = function () { this.imageWidth = Math.round(this.target.clientWidth), this.imageHeight = Math.round(this.target.clientHeight), this.editingTarget.width = this.imageWidth, this.editingTarget.height = this.imageHeight, this.editingTarget.style.width = this.imageWidth + "px", this.editingTarget.style.height = this.imageHeight + "px" }, t.prototype.setTopLeft = function () { var t = this.editingTarget.getBoundingClientRect(), e = this.editorCanvas.getBoundingClientRect(); this.left = t.left - e.left, this.top = t.top - e.top }, t.prototype.initMarkerCanvas = function () { this.markerImageHolder = document.createElement("div"), this.markerImageHolder.style.setProperty("touch-action", "pinch-zoom"), this.markerImage = document.createElementNS("http://www.w3.org/2000/svg", "svg"), this.markerImage.setAttribute("xmlns", "http://www.w3.org/2000/svg"), this.markerImage.setAttribute("width", this.imageWidth.toString()), this.markerImage.setAttribute("height", this.imageHeight.toString()), this.markerImage.setAttribute("viewBox", "0 0 " + this.imageWidth.toString() + " " + this.imageHeight.toString()), this.markerImage.style.pointerEvents = "auto", this.markerImageHolder.style.position = "absolute", this.markerImageHolder.style.width = this.imageWidth + "px", this.markerImageHolder.style.height = this.imageHeight + "px", this.markerImageHolder.style.transformOrigin = "top left", this.positionMarkerImage(), this.defs = e.createDefs(), this.markerImage.appendChild(this.defs), this.markerImageHolder.appendChild(this.markerImage), this.editorCanvas.appendChild(this.markerImageHolder) }, t.prototype.initOverlay = function () { this.overlayContainer = document.createElement("div"), this.overlayContainer.style.position = "absolute", this.overlayContainer.style.left = "0px", this.overlayContainer.style.top = "0px", this.overlayContainer.style.width = this.imageWidth + "px", this.overlayContainer.style.height = this.imageHeight + "px", this.overlayContainer.style.display = "flex", this.markerImageHolder.appendChild(this.overlayContainer) }, t.prototype.positionMarkerImage = function () { this.markerImageHolder.style.top = this.top + "px", this.markerImageHolder.style.left = this.left + "px" }, t.prototype.attachEvents = function () { var t = this; this.markerImage.addEventListener("pointerdown", this.onPointerDown), this.markerImage.addEventListener("dblclick", this.onDblClick), window.addEventListener("pointermove", this.onPointerMove), window.addEventListener("pointerup", this.onPointerUp), window.addEventListener("pointercancel", (function () { t.touchPoints > 0 && t.touchPoints-- })), window.addEventListener("pointerout", (function () { t.touchPoints > 0 && t.touchPoints-- })), window.addEventListener("pointerleave", this.onPointerUp), window.addEventListener("resize", this.onWindowResize), window.addEventListener("keyup", this.onKeyUp) }, t.prototype.addLogo = function () { this.logoUI = document.createElement("div"), this.logoUI.style.display = "inline-block", this.logoUI.style.margin = "0px", this.logoUI.style.padding = "0px", this.logoUI.style.fill = "#333333"; var t = document.createElement("a"); t.href = "https://markerjs.com/", t.target = "_blank", t.innerHTML = '<svg viewBox="0 0 112 96" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="1.414"><path fill="#e5f20d" fill-opacity=".647" d="M0 40.386h111.96V95.62H0z"/><path d="M93.61 61.452c0 .987-.328 1.831-.987 2.53-.657.7-1.52 1.048-2.591 1.048-1.481 0-2.222-.74-2.222-2.22 0-16.617-.533-29.347-1.604-38.192-1.068-8.842-2.92-13.265-5.552-13.265-4.443 0-10.94 15.509-19.497 46.52v.124c0 .987-.328 1.831-.987 2.53-.657.7-1.52 1.048-2.592 1.048-1.48 0-2.22-.74-2.22-2.22 0-3.29.165-8.392.493-15.302.33-7.732.494-13.82.494-18.262 0-6.17-.186-10.55-.556-13.142-.37-2.591-1.172-3.887-2.406-3.887-2.796 0-6.333 5.12-10.612 15.363C38.494 34.367 34.01 46.44 29.32 60.34l-1.11 3.209a5.714 5.714 0 01-1.42 2.097c-.617.578-1.295.864-2.036.864-.987 0-1.644-.081-1.974-.247-.328-.162-.533-.656-.617-1.48-.41-4.03-.74-9.418-.987-16.165-.163-1.728-.329-4.566-.494-8.515-.822-13.901-1.562-23.3-2.221-28.196-.657-4.893-.987-7.628-.987-8.205 0-.657.33-1.44.987-2.345.659-.903 1.276-1.357 1.85-1.357 1.319 0 2.387.947 3.21 2.838.411.906.863 4.526 1.357 10.859.493 6.335.905 14.19 1.233 23.568l.617 18.88c4.527-13.983 9.216-26.673 14.068-38.068C45.65 6.686 50.093.988 54.123.988c2.715 0 4.566 1.974 5.553 5.923.987 3.949 1.481 9.667 1.481 17.152 0 3.949-.081 9.625-.247 17.029l-.123 5.676c3.373-11.762 6.725-21.634 10.057-29.615 3.331-7.979 6.685-11.97 10.056-11.97 8.475 0 12.71 18.757 12.71 56.269z" fill-rule="nonzero"/></svg>', t.title = "Powered by marker.js", t.style.display = "grid", t.style.alignItems = "center", t.style.justifyItems = "center", t.style.padding = "3px", t.style.width = "20px", t.style.height = "20px", this.logoUI.appendChild(t), this.editorCanvas.appendChild(this.logoUI), this.logoUI.style.position = "absolute", this.logoUI.style.pointerEvents = "all", this.positionLogo() }, t.prototype.positionLogo = function () { this.logoUI && (this.logoUI.style.left = this.markerImageHolder.offsetLeft + 10 + "px", this.logoUI.style.top = this.markerImageHolder.offsetTop + this.markerImageHolder.offsetHeight - this.logoUI.clientHeight - 10 + "px") }, t.prototype.showUI = function () { this.coverDiv = document.createElement("div"), this.coverDiv.className = this.styles.classNamePrefixBase + " " + this.styles.classNamePrefix, this.coverDiv.style.fontSize = "16px", this.coverDiv.style.userSelect = "none", this.coverDiv.style.position = "absolute", this.coverDiv.style.top = this.target.offsetTop.toString() + "px", this.coverDiv.style.left = this.target.offsetLeft.toString() + "px", this.coverDiv.style.width = this.target.offsetWidth.toString() + "px", this.coverDiv.style.zIndex = "5", this.targetRoot.appendChild(this.coverDiv), this.uiDiv = document.createElement("div"), this.uiDiv.style.display = "flex", this.uiDiv.style.flexDirection = "column", this.uiDiv.style.flexGrow = "2", this.uiDiv.style.margin = "0px", this.uiDiv.style.border = "0px", this.coverDiv.appendChild(this.uiDiv), this.contentDiv = document.createElement("div"), this.contentDiv.style.display = "flex", this.contentDiv.style.flexDirection = "row", this.contentDiv.style.flexGrow = "2", this.contentDiv.style.flexShrink = "1", this.uiDiv.appendChild(this.contentDiv), this.editorCanvas = document.createElement("div"), this.editorCanvas.style.flexGrow = "2", this.editorCanvas.style.flexShrink = "1", this.editorCanvas.style.position = "relative", this.editorCanvas.style.overflow = "hidden", this.editorCanvas.style.display = "flex", this.editorCanvas.style.pointerEvents = "none", this.contentDiv.appendChild(this.editorCanvas), this.editingTarget = document.createElement("canvas"), this.editorCanvas.appendChild(this.editingTarget) }, t.prototype.closeUI = function () { this.targetRoot.removeChild(this.coverDiv) }, t.prototype.removeMarker = function (t) { this.markerImage.removeChild(t.container), this.markers.indexOf(t) > -1 && this.markers.splice(this.markers.indexOf(t), 1), t.dispose() }, t.prototype.restoreState = function (t) { var e = this; for (this.markers.splice(0); this.markerImage.lastChild;)this.markerImage.removeChild(this.markerImage.lastChild); t.markers.forEach((function (t) { var i = e.availableMarkerTypes.find((function (e) { return e.typeName === t.typeName })); if (void 0 !== i) { var s = e.addNewMarker(i); s.restoreState(t), e.markers.push(s) } })), t.width && t.height && (t.width !== this.imageWidth || t.height !== this.imageHeight) && this.scaleMarkers(this.imageWidth / t.width, this.imageHeight / t.height) }, t.prototype.addNewMarker = function (t) { var i = e.createGroup(); return i.setAttribute("class", "" + this.styles.classNamePrefix + this.MARKER_CONTAINER_CLASS_SUFFIX), this.markerImage.appendChild(i), new t(i) }, t.prototype.setCurrentMarker = function (t) { var e = this, i = this.currentMarker !== t; void 0 !== this.currentMarker && this.currentMarker.deselect(), this.currentMarker = t, void 0 !== this.currentMarker && this.currentMarker.select(), i && this.eventListeners.select.forEach((function (i) { return i(e, t) })) }, t.prototype.onPointerDown = function (t) { var e = this; if (this.touchPoints++, 1 === this.touchPoints || "touch" !== t.pointerType) { var i = this.markers.find((function (e) { return e.ownsTarget(t.target) })); void 0 !== i ? (this.setCurrentMarker(i), this.isDragging = !0, this.currentMarker.pointerDown(this.clientToLocalCoordinates(t.clientX, t.clientY), t.target)) : this.setCurrentMarker(), this.eventListeners.pointerdown.length > 0 && this.eventListeners.pointerdown.forEach((function (s) { return s(e, t, i) })) } }, t.prototype.onDblClick = function (t) { var e = this.markers.find((function (e) { return e.ownsTarget(t.target) })); void 0 !== e && e !== this.currentMarker && this.setCurrentMarker(e), void 0 !== this.currentMarker ? this.currentMarker.dblClick(this.clientToLocalCoordinates(t.clientX, t.clientY), t.target) : this.setCurrentMarker() }, t.prototype.onPointerMove = function (t) { var e = this; if (1 !== this.touchPoints && "touch" === t.pointerType || (void 0 !== this.currentMarker || this.isDragging) && t.preventDefault(), this.eventListeners.over.length > 0 || this.eventListeners.pointermove.length > 0) { var i = this.markers.find((function (e) { return e.ownsTarget(t.target) })); i !== this.hoveredMarker && (this.hoveredMarker = i, this.eventListeners.over.forEach((function (t) { return t(e, e.hoveredMarker) }))), this.eventListeners.pointermove.forEach((function (s) { return s(e, t, i) })), this.isPointerIn || void 0 === i && this.markerImage !== t.target || (this.isPointerIn = !0, this.eventListeners.pointerenter.forEach((function (s) { return s(e, t, i) }))), this.isPointerIn && void 0 === i && this.markerImage !== t.target && (this.isPointerIn = !1, this.eventListeners.pointerleave.forEach((function (s) { return s(e, t, i) }))) } }, t.prototype.onPointerUp = function (t) { var e = this; if (this.touchPoints > 0 && this.touchPoints--, 0 === this.touchPoints && this.isDragging && void 0 !== this.currentMarker && this.currentMarker.pointerUp(this.clientToLocalCoordinates(t.clientX, t.clientY)), this.isDragging = !1, this.eventListeners.pointerup.length > 0) { var i = this.markers.find((function (e) { return e.ownsTarget(t.target) })); this.eventListeners.pointerup.forEach((function (s) { return s(e, t, i) })) } }, t.prototype.onKeyUp = function (t) { void 0 === this.currentMarker || "Delete" !== t.key && "Backspace" !== t.key || (this.removeMarker(this.currentMarker), this.setCurrentMarker(), this.markerImage.style.cursor = "default") }, t.prototype.clientToLocalCoordinates = function (t, e) { var i = this.markerImage.getBoundingClientRect(); return { x: t - i.left, y: e - i.top } }, t.prototype.onWindowResize = function () { this.positionUI() }, t.prototype.positionUI = function () { this.setTopLeft(), this.coverDiv.style.top = this.target.offsetTop.toString() + "px", this.coverDiv.style.left = this.target.offsetLeft.toString() + "px", this.positionMarkerImage(), this.positionLogo() }, t.prototype.addEventListener = function (t, e) { this.eventListeners.addEventListener(t, e) }, t.prototype.removeEventListener = function (t, e) { this.eventListeners.removeEventListener(t, e) }, t.prototype.addPlugin = function (t) { this.plugins.push(t) }, t.prototype.removePlugin = function (t) { var e = this.plugins.indexOf(t); e >= 0 && this.plugins.splice(e, 1) }, t.instanceCounter = 0, t }(); t.Activator = i, t.ArrowMarker = y, t.CalloutMarker = v, t.CoverMarker = g, t.CurveMarker = b, t.EllipseFrameMarker = w, t.EllipseMarker = m, t.EventListenerRepository = P, t.FrameMarker = l, t.FreehandMarker = d, t.HighlightMarker = f, t.LineMarker = c, t.LinearMarkerBase = p, t.MarkerBase = o, t.MarkerView = T, t.MeasurementMarker = k, t.RectangleMarker = a, t.RectangularBoxMarkerBase = h, t.StyleClass = C, t.StyleManager = x, t.StyleRule = S, t.SvgHelper = e, t.TextMarker = u, t.TransformMatrix = n, Object.defineProperty(t, "__esModule", { value: !0 }) }));
//# sourceMappingURL=markerjs-live.js.map